// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  telegramId   String        @unique
  username     String        @unique
  password     String?
  firstName    String
  lastName     String
  hash         String
  authDate     DateTime
  photoUrl     String?
  role         Role          @default(user)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

enum Role {
  user
  admin
}

model Transaction {
  amount         Decimal
  bank_provider  String
  chain          String
  chargeId       String   @unique
  code           String   @unique
  createAt       DateTime @default(now())
  email          String
  exchangeRate   Decimal
  id             String   @id @default(uuid())
  phoneName      String
  phoneNum       String
  phoneNumber    String
  qr_url         String
  quantity       Float
  status         Status   @default(waiting)
  timeToExpired  Int
  transactionFee Decimal
  updateAt       DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  walletAddress  String
  redirect_ssl   String
  telegramId     String
}

enum Status {
  waiting
  success
  timeout
  unknow
  cancel
}

model Chain {
  id        String      @id @default(uuid())
  name      String      @unique
  value     String
  rpcUrl    String
  apiKey    String?
  status    StatusChain @default(active)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum StatusChain {
  active
  disabled
  maintenance
}

model Wallet {
  id         String       @id @default(uuid())
  name       String       @unique
  privateKey String
  status     StatusWallet @default(disabled)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum StatusWallet {
  active
  disabled
}

model TransactionTon {
  id       String  @id @default(uuid())
  lt_start String?
  address  String
  lt       String?
  hash     String?
  code     String  @unique
}
